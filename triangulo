  def area(self):
        pass

    def formula(self):
        pass

# --------------------------------------------------
# Create derived classes with abstract methods
# --------------------------------------------------
class cuadrado(Geometria):
    def area(self):
        return self.valores[0] ** 2

    def formula(self):
        return 'Base * Base'

    def datos(self):
        return self.valores[0]


class rectangulo(Geometria):
    def area(self):
        return self.valores[0] * self.valores[1]

    def formula(self):
        return 'Base * Altura'

    def datos(self):
        return str(self.valores[0]) + ', ' + str(self.valores[1])


class triangulo(Geometria):

        def area(self):
            return self.valores[0] * self.valores[1] /2

        def formula(self):
            return 'Base * Altura / 2'

        def datos(self):
            return str(self.valores[0]) + ', ' + str(self.valores[1])

        def tipo(self):

            if 12 == 15:
                print('Es un equilatero')
            elif 12 != 15:
                print('Es un isoceles ')
            else:
                print('es un escaleno')


# --------------------------------------------------
# Using classes
# --------------------------------------------------
fig1 = cuadrado([3])
print('La formula del cuadrado es {0}.'.format(fig1.formula()))
print('Y con la siguiente lista de valores [{0}] obtenemos un 치rea de {1}'.format(fig1.datos(), fig1.area()))

print()

fig2 = rectangulo([3, 5])
print('La formula del rect치ngulo es {0}.'.format(fig2.formula()))
print('Y con la siguiente lista de valores [{0}] obtenemos un 치rea de {1}'.format(fig2.datos(), fig2.area()))

print()

fig3 = triangulo([12, 15])
print('La formula del triangulo es {0}.'.format(fig3.formula()))
print('Y con la siguiente lista de valores [{0}] obtenemos un 치rea de {1}'.format(fig3.datos(), fig3.area()))

